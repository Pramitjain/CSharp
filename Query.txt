

                Thread T = new Thread(delegate ()
                {
                    test.InnerHtml += "<br/>" + "1_" + Convert.ToString(DateTime.Now.ToLongTimeString());
                    HelloWorld();
                });
                T.Start();
                test.InnerHtml += "<br/>" + Convert.ToString(DateTime.Now.ToLongTimeString());

 [WebMethod, ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = true)]
        public static string GetDashboardCountBA()
        {
            User user = new User();
            try
            {
                using (DataTable dt = user.GetDashboardCountBA(Configurations.Instance.ConnectionString, HttpContext.Current.Session["SapCode"].ToString()))
                {
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        return JsonConvert.SerializeObject(new { Headers = dt });
                    }
                    else
                    {
                        return JsonConvert.SerializeObject(new { Headers = "" });
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionUtility.LogException(ex, ex.Source);
                return JsonConvert.SerializeObject(new { Error = "Some thing Went Wrong please try again.", Code = 500 });

            }

        }

var MandatoryInputs = $("#appendPanels").find('.panel-body .MyRequiredField');
                var blnMandatoryValidations = true;
                if (buttonType != "SAVE") {

                    // Check mandatory if Submit button is clicked
                    MandatoryInputs.each(function (i, r) {
                        if (blnMandatoryValidations != false) {
                            if (r.value == "") {
                                $(this).focus();
                                validatemsg("Please Enter " + r.placeholder, "danger");
                                blnMandatoryValidations = false;
                                return false;
                            }
                        }
                    });
                }




var xmlRemarks = '<?xml version="1.0" encoding="utf-16"?><rows>';

xmlRemarks += '<row>';
                            xmlRemarks += '<f_CatId>' + catId + '</f_CatId>';
                            xmlRemarks += '<f_SubCatId>' + r.id.split('_')[2] + '</f_SubCatId>';
                            xmlRemarks += '<f_SubCatValue><![CDATA[' + r.value + ']]></f_SubCatValue>';
                            xmlRemarks += '</row>';

xmlRemarks += " </rows>";



ALTER procedure [dbo].[usp_TABA_InsertBranchVisitByXML](                      
@UserPrvDataXml XML,          

DECLARE @docHandle INT

EXEC sp_xml_preparedocument @docHandle OUTPUT,@XmlRemarks      

SELECT * INTO #TMP_UserRemarksData FROM OPENXML(@docHandle, N'/rows/row',2)      
              WITH(      
                       f_CatId int,      
                       f_SubCatId int,      
                       f_Remarks nvarchar(500)      
                     )  

EXEC sp_xml_removedocument @docHandle;    

INSERT INTO t_TA_BranchVisit_Remarks      
              (      
                      f_Oprn_Code, f_Oprn_Category, f_UID,f_CatId,f_SubCatid, f_Remarks ,f_SubmitType, f_IsActive, f_CreatedBy, f_CreatedName, f_CreatedIP, f_CreatedOn     
              )      
                     SELECT       
                     @Oprn_Code,@OprnCategory, @Uid, f_CatId, f_SubCatId, f_Remarks,@SubmitType, 1, @CreatedBy, @CreatedName, @CreatedIp, @CreatedOn
                     FROM #TMP_UserRemarksData;  



$.each(data, function (i, row) {
                    $('#tbCompAssign').append('<tr><td style="display: none;">' + row.ComplianceId + '</td><td>' + row.CompType + '</td><td>' + row.ComplianceDesc + '</td><td id="' + row.AssignUser + '" Class="Center">' + row.AssignUserName + '</td><td Class="Center">' + row.AssignedDate + '</td><td Class="Center">' + row.GraceDays + '</td><td id="' + row.EscalatioTo + '" Class="Center">' + row.EscalationToUserName + '</td><td id="' + row.EscalatioCC + '" Class="Center">' + row.EscalationCcUserName + '</td><td style="display: none;">' + row.ScheduleId + '</td><td class="Center"><input type="button" class="btn btn-common btn-xs btn_Edit" value="Edit" title="Edit" /><input type="button" class="btn btn-common btn-xs btn_Remove" value="Remove" title="Remove" style="margin-left:5px;" /></td></tr>');
                });
                Clicks();

function Clicks() {
    $('.btn_Edit').click(function () {
        var tr = $(this).closest('tr');
        //$('#txtGraceDays').val(tr[0].children['5'].textContent);
        $('#txtEscalationTo').val(tr[0].children['6'].id);
        $('#txtEscalationCc').val(tr[0].children['7'].id);
        $('#txtAssignTo').val(tr[0].children['3'].id);
        $('#hdnCompId').val(tr[0].children['0'].textContent);
        $('#txtCompl').val(tr[0].children['2'].textContent);
        $('#txtCompl').focus();
        $('#txtComplMaster').val(tr[0].children['1'].textContent);
        $('#txtCompl,#txtComplMaster').attr('disabled', 'disabled');
    });

}

[HttpPost]
        public IHttpActionResult GetScheduleCompDueDate(int CompId)
        {
            try
            {
                DataTable dt = new DataTable();
                dt = user.GetScheduleCompDueDate(Configurations.Instance.ConnectionString, CompId, Convert.ToInt32(HttpContext.Current.Session["SapCode"]));
                dynamic ComMaster = (from DataRow m in dt.Rows
                                     select new
                                     {
                                         f_ComplianceValueId = Convert.ToString(m["f_ComplianceValueId"]),
                                         f_DueDate = Convert.ToString(m["f_DueDate"]),
                                         f_Assigned = Convert.ToString(m["f_Assigned"])
                                     });
                return Json(new { Table = ComMaster, Code = 200 });
            }
            catch (Exception ex)
            {
                ExeptionLogAttribute.LogException(ex);
                return Json(new { Error = "Some thing Went Wrong please try again.", Code = 500 });
            }
        }


   [HttpPost]
        public IHttpActionResult SaveComplianceToTransfer(JObject data)
        {
            int rowCount = -1;
            try
            {
                if (data != null)
                {
                    dynamic json = data;
                    string FromEmp = json.FromEmp;
                    string ToEmp = json.ToEmp;
                    string ComplianceIds = json.ComplianceId;
                    string ScheduleIds = json.SchdId;
                    string AssignBy = HttpContext.Current.Session["SapCode"].ToString();
                    string TransferedIp = HttpContext.Current.Session["LoginIP"].ToString();
                    if (!string.IsNullOrEmpty(FromEmp) && !string.IsNullOrEmpty(ToEmp) && !string.IsNullOrEmpty(ComplianceIds) && !string.IsNullOrEmpty(ScheduleIds) && !string.IsNullOrEmpty(AssignBy) && !string.IsNullOrEmpty(TransferedIp))
                    {
                        rowCount = user.SaveTrasnferedCompliance(Configurations.Instance.ConnectionString, FromEmp, ToEmp, AssignBy, ComplianceIds, ScheduleIds, TransferedIp);
                    }
                }
            }
            catch (Exception ex)
            {
                ExeptionLogAttribute.LogException(ex);
                return Json(new { Error = "Some thing Went Wrong please try again.", Code = 500 });
            }
            return Json(rowCount);
        }


[HttpGet]
        public IHttpActionResult GetReportingManagerName(string EmpCode)
        {
            try
            {
                using (DataTable dt = user.GetReportingManagerName(Configurations.Instance.ConnectionString, EmpCode))
                {
                    dynamic ReportName = (from DataRow m in dt.Rows
                                          select new
                                          {
                                              ReportingName = Convert.ToString(m["ReportingName"])
                                          });
                    return Json(new { Table = ReportName, Code = 200 });
                }
            }
            catch (Exception ex)
            {
                ExeptionLogAttribute.LogException(ex);
                return Json(new { Error = "Some thing Went Wrong please try again.", Code = 500 });
            }
        }


<div class="col-sm-4">
                                        <div class="form-group">
                                            <div class="col-xs-6">
                                                <label class="control-label spanlbl">Document Upload:</label>
                                                <div class="col-sm-12">
                                                    <div id="UploadDoc"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-6 hidden spanlbl" id="div_UploadedDoc">
                                                <label class="control-label">Uploaded Document:</label>
                                                <div class="col-sm-12">
                                                    <div id="UploadFile"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>


var brands = $('#ddlBranch option:selected');
                    var selected = [];
                    $("#hdn_hidden").val('');
                    $(brands).each(function (index, brand) {
                        document.getElementById("hdn_hidden").value += "'" + $(this).val() + "'" + ",";
                    });


00074431
00074391

exec usp_TestNextRecord 20

alter procedure usp_TestNextRecord(@FromRecord int)
as
	begin
	     declare @ToRecord int;
		 set @ToRecord = @FromRecord + 10;
			SELECT * FROM( 
				select distinct  
		
					b.f_id ,
					b.f_UId,            
					ISNULL(b.f_BranchDesc,'')  as f_Branch,            
					CONVERT(varchar(10), b.FromDate,103)as FromDate,                    
					CONVERT(varchar(10), b.ToDate,103) as ToDate,                
					b.f_SubmitType,              
					CONVERT(varchar(10),b.f_CreatedOn,103) as f_CreatedOn,              
					b.f_CreatedName,        
					b.FromDate AS FdATE ,
					ROW_NUMBER() over (ORDER BY  b.f_id) AS Number      
			from                    
				t_TA_BranchVisit_Detail_Mst b with(nolock) ) AS T WHERE  Number between  @FromRecord + 1 and @ToRecord


	end


$.ajax(
         {
             url: APIUrl,
             data: JSON.stringify(Input),
             type: 'POST',
             contentType: "application/json; charset=utf-8",
             dataType: "json",
             success: function (odata) {
                 var data = JSON.parse(odata.d);

                 if (data.Headers != null) {

                     if (Url.trim().indexOf("NotAssignedAdd") > 0) {
                         window.location.href = baseUrl + "DocumentSelectionNoMode.aspx";
                     }
                     else {
                         window.location.href = baseUrl + "DocumentSelection.aspx";
                     }
                     localStorage.setItem("batchno", data.Headers);
                 }
             },
             error: function (jqXHR, textStatus, err) {
                 validatemsg(err);
                 $("#dvLoading").hide();
             }
         });

Select * into t_Pass_CardEmp_Link1  from  t_Pass_CardEmp_Link 


declare @id int;
set @id = 0;

while @id<10
begin
select @id
set @id= @id + 1;
	print @id;
end


select GETDATE()
select (CONVERT(varchar(10), GETDATE(),103))
select DAY(getdate()) as DAY
select MONTH(getdate()) as MONTH
select YEAR(getdate()) as YEAR



function ReadConfigurationSettings()
    {
        var k = '<%=ConfigurationManager.AppSettings["var1"].ToString() %>'
        alert(k);
    }


2FD58B85-6B99-59F5-FC2F-05BC958CCEBA

http://uat.mfdms.com/downloadApplication.action?UN=branchvisit.dms@mahfin.com&MA=BRANCHVISIT&DT=BV_SAMPLE_FILE_CHECKING&searchProps=SAP_CODE@24004266~BRANCH_CODE@BOR~FROM_DATE@16/12/2017~TO_DATE@17/12/2017

http://uat.mfdms.com/downloadApplication.action?UN=branchvisit.dms@mahfin.com&MA=BRANCHVISIT&DT=BV_TVR_CHECK&searchProps=SAP_CODE@24004266~BRANCH_CODE@BOR~FROM_DATE@16/12/2017~TO_DATE@17/12/2017

exec sp_rename 'usp_TABV_InsertBranchDetails' ,'usp_BVR_InsertBranchDetails'

ALTER DATABASE Mmfsl_APP_TABranchVisit MODIFY NAME= Mmfsl_APP_BranchVisitReporting


update t_BVR_Details_Remarks  set f_Details_HdrSequence = a.f_Details_HdrSequence  from t_BVR_Detail_Mst a inner join t_BVR_Details_Remarks b on b.f_UID=a.f_UId


DROP INDEX f_Details_HdrSequence ON dbo.t_BVR_Details_Remarks 

CREATE INDEX IDX_NC_T_BVR_REMARKS_F_DETAILS_HDRSEQUENCE ON t_BVR_Remarks (f_Details_HdrSequence);

ALTER TABLE t_BVR_Details ADD CONSTRAINT UC_F_DETAILS_HDRSEQUENCE UNIQUE (f_Details_HdrSequence);

drop index IDX_PK_T_BVR_REMARKS_F_PK_REMARKS_HDR_ID on t_BVR_Remarks

create Unique clustered index IDX_PK_T_BVR_REMARKS_F_PK_REMARKS_HDR_ID on t_BVR_Remarks (f_Pk_Remarks_Hdr_ID)


param[6] = new SqlParameter("@FromDate", string.IsNullOrEmpty(ObjAggrBO.FromDate) ? (object)DBNull.Value : ObjAggrBO.FromDate);

// Out Parameter

 param[17] = new SqlParameter("@Message", Message);
            param[17].Direction = ParameterDirection.Output;
            param[17].Size = Int32.MaxValue;
            param[18] = new SqlParameter("@CancelDate", string.IsNullOrEmpty(ObjAggrBO.CancelDate) ? (object)DBNull.Value : ObjAggrBO.CancelDate);
            param[19] = new SqlParameter("@CancelRemarks", ObjAggrBO.CancelRemarks);

            SqlHelper.ExecuteScalar(SqlConnstr, CommandType.StoredProcedure, "usp_FAMS_Agr_InsertAggrement_ContractDetails", param);
            Message = Convert.ToString(param[17].Value);



insert into t_BVR_Details_history select * from t_BVR_Details WITH(NOLOCK) where  f_Details_HdrSequence=LTRIM(RTRIM(@UniqueId));          

 SELECT * INTO #OldData from t_BVR_Details with(NOLOCK) where f_Details_HdrSequence=LTRIM(RTRIM(@UniqueId)) and f_Category_HdrSequence in(select f_Category_HdrSequence from t_BVR_SubCategory_Mst with(NOLOCK) where f_ControlType='file' and f_Active=1) and f_SubCatValue is not null      

HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"].ToString();


https://stackoverflow.com/questions/4408250/is-it-possible-to-force-a-menu-popout-to-trigger-on-click-instead-of-mouseover


nclick=\"DeleteStoryPost(&#39;" + storyId + "&#39;,&#39;" + storyUId + "&#39;);\"


select * from [172.30.0.222\MFGPONL].Mmfsl_Sys_User_Mgmt.dbo.Sys_Application_Mst where AppName='FAMS'


DECLARE @name NVARCHAR(50);
DECLARE @path NVARCHAR(256); -- path for backup files 
DECLARE @fileName NVARCHAR(256); -- filename for backup 
DECLARE @fileDate NVARCHAR(20); -- used for file name 

--deallocate amin

declare amin cursor for 

select f_CompanyName from t_CMS_Company_Mst 

open amin

fetch next from amin into @name 


WHILE @@FETCH_STATUS = 0              
BEGIN              
	
	 SET @fileName = @name 

      FETCH NEXT FROM amin INTO @name 

		select @fileName;
end

close amin
deallocate amin


int[] arr = { 12, 31, 15 };
 Array.ForEach(arr, element => Console.WriteLine(element));


int[] arr = { 12, 31, 15 };

 var str = from s in arr where s == 12 select s;
 int[] array2 = str.ToArray();
 foreach  (int items in array2)
  Console.WriteLine(items)

public class ABC
. {
.     public string Method1() { return "ABC"; }
.     protected internal string Method2() { return "XYZ"; }
. }
public class XYZ: ABC {
.     public string Method3() { return "ABC"; }
. }

XYZ xyz = new XYZ();

Console.log(xyz.Method2());

Interactive Window--> CNTRL+E , CNTRL+E

for (int i = 0; i <= 5; i++)
. {
.     for (int j = 0; j <= i; j++) {
.         Console.Write("*");
.     }
.     Console.WriteLine("");
. }



 string OprnCode = string.Empty;
OprnCode = Convert.ToString(ds.Tables[0].Rows[0]["f_OprnCode"]);

MessageUpdate(Color.Red, "Don't have rights to view this Document.");

.container[style] {
        padding-top: 21px !important;
    }



4327394998

<script src="someJs.js?v=1001" ></script>
<link href="someCss.css?v=2001"></link> 


var myJSONString = '{' +
    '"products":' +
    ' ['+
    '    { "name": "Slinky", "category": "Toy", "price": 9.56 },  ' +
    '    { "name": "Hamburger", "category": "Grocery", "price": 2.49 },  ' +
    '    { "name": "Squirt Gun", "category": "Toy", "price": 8.50 },  ' +
    '    { "name": "Board Game 1", "category": "Game", "price": 35 },  ' +
    '    { "name": "Card Game 1", "category": "Game", "price": 8.50 },   ' +
    '    { "name": "Poker", "category": "Game", "price": 75.50 },  ' +
    '    { "name": "Blocks", "category": "Toy", "price": 2.5 },  ' +
    '    { "name": "Tricycle", "category": "Toy", "price": 95 },  ' +
    '    { "name": "Jacks", "category": "Toy", "price": 3.5 },  ' +
    '    { "name": "Lettuce", "category": "Grocery", "price": 25 }  ' +
    ' ]  ' +
    ', "store": "Dover Town Center"  ' +
'}';

// put JSON into an object
var myData = JSON.parse(myJSONString);


var toys = $.grep(myData.products, function (element, index) {
    // return whether myData.products.category == 'Toy'
    return element.category == "Toy";
});

// toys is a new array of the matching products
$.each(toys, function (i) {
    $('#toys').append("<li class='toy'>" + toys[i].name + "</li>");
});

//Filter in Jquery and Grep Function;
https://gist.github.com/devdays/4ba2546cbdc90042b9ea



<li onclick="showDetails(this)" id="owl" data-animal-type="bird">Owl</li>

function showDetails(animal) {
    var animalType = animal.getAttribute("data-animal-type");
    alert("The " + animal.innerHTML + " is a " + animalType + ".");
	
}




<table>
<tr class="a"  data-id ='45'>
<td>sometext</td>
</tr>
<tr class="a"  data-id ='35'>
<td>....</td>
</tr>
<tr class="a"  data-id ='40'>
<td>....</td>
</tr>
<tr class="a"  data-id ='48'>
<td>....</td>
</tr>
</table>

 var term = $('.a').attr('data-id');
	console.log($('.a').attr('data-id');)



 $.getJSON("demo_ajax_json.js",data:input, function(result){
            $.each(result, function(i, field){
                $("div").append(field + " ");
            });
        });


select COUNT(f_Branch), f_Branch as Count , f_BranchDesc from t_BVR_Visit_Hdr  group by f_Branch,f_BranchDesc  having  Count(f_Branch) > 2
