========================= Create a JWT Token =======================================

 [HttpPost("login")]
        public async Task<IActionResult> Login(LoginReqDto loginReq)
        {
            var user = await uow.UserRepository.Authenticate(loginReq.UserName, loginReq.Password);

            ApiError apiError = new ApiError();

            if (user == null)
            {
                apiError.ErrorCode = Unauthorized().StatusCode;
                apiError.ErrorMessage = "Invalid user name or password";
                apiError.ErrorDetails = "This error appear when provided user id or password does not exists";
                return Unauthorized(apiError);
            }

            var loginRes = new LoginResDto();
            loginRes.UserName = user.Username;
            loginRes.Token = CreateJWT(user);
            return Ok(loginRes);
        }
        
        ============  "Key": "shhh... this is my top secret" ============================================
        
        ============== Create Token ===================
        
           private string CreateJWT(User user)
        {
            var secretKey = configuration.GetSection("AppSettings:Key").Value;
            var key = new SymmetricSecurityKey(Encoding.UTF8
                .GetBytes(secretKey));

            var claims = new Claim[] {
                new Claim(ClaimTypes.Name,user.Username),
                new Claim(ClaimTypes.NameIdentifier,user.Id.ToString())
            };

            var signingCredentials = new SigningCredentials(
                    key, SecurityAlgorithms.HmacSha256Signature);

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.UtcNow.AddMinutes(1),
                SigningCredentials = signingCredentials
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            try
            {
                var token = tokenHandler.CreateToken(tokenDescriptor);
                return tokenHandler.WriteToken(token);
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        
        
        
        =============================================== Validate JWT =====================================
        
        Add Code in Start Up.cs class in Configure Service
        
           // Token Data Controller Token Validation Method Starts here
            #region Code for JWT Token to validate the token header Step -1 

            // Code to validate the JWT Token Step -1 Starts here.
            var secretKey = Configuration.GetSection("AppSettings:Key").Value;
            var key = new SymmetricSecurityKey(Encoding.UTF8
                .GetBytes(secretKey));

            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
            // services.AddAuthentication("Bearer")
                .AddJwtBearer(opt =>
                {
                    opt.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuerSigningKey = true,
                        ValidateIssuer = false,
                        ValidateAudience = false,
                        IssuerSigningKey = key
                    };
                });
            #endregion

    ===================
        
    Add Configure(IApplicationBuilder app,
    
    app.UseAuthentication();
    
    Jquery Ajax Method 
    
    $("#btn_GetUsers").click(function () {
                try {


                    var Token = $("#txt_Token").val();
                    var TokenParam = "Bearer " + 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IlByYW1pdCIsIm5hbWVpZCI6IjEiLCJuYmYiOjE2MjIzNzc1NDEsImV4cCI6MTYyMjM3NzYwMSwiaWF0IjoxNjIyMzc3NTQxfQ.ySs7pq7qKt9WWh4PjzdKakoRwKBIKayv6DhJkeBPTGE';
                    console.log(TokenParam);
                    var settings = {
                        "url": "http://localhost:58545/API/TokenData/Users",
                        "method": "GET",
                        "timeout": 0,
                        "headers": {
                            "Authorization": TokenParam

                        },
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response);
                    });
                } catch (e) {
                    console.log(e   );
                }
            })
        })
        
        
