 1. case b.f_ApprovalStatus when 'A' then 'Approved'                  
   when 'R' then 'Rejected'                  
   else 'Not Approved'                  
   end  as Status,                  

2.  ISNULL(CONVERT(varchar(10),b.f_ApproveDate,103),'') as f_ApproveDate, 

3.
CONVERT(varchar(10),b.f_TransRequestDate,103) as TranReqDate,         

4. alter procedure usp_FAMS_GetAssetApprovedListforDC(@Createdby varchar(100),        
@FromDate datetime=null,        
@ToDate datetime=null)                       

((convert(date,b.f_TransRequestDate) >= convert(date, @FromDate) and (convert(date,b.f_TransRequestDate) <= convert(date,@ToDate)) or (@FromDate ='' or @ToDate ='') ))        and b.f_CreatedBy=@Createdby                               

T_AssetTransferReq_Hdr b with(NOLOCK)                     

// Function Number to Words
5. alter FUNCTION [dbo].[ufn_NumberToWords]    
(    
@Amount bigint    
)    
RETURNS nvarchar(max)    
AS    
BEGIN    
declare @Ones table (Id int, Name nvarchar(50))    
declare @Decades table (Id int, Name nvarchar(50))    
insert into  @Ones(Id,Name) values(0,''),(1,'One'),     
(2,'Two'),(3,'Three'),(4,'Four'),(5,'Five'),     
(6,'Six'),(7,'Seven'),(8,'Eight'),(9,'Nine'),     
(10,'Ten'),(11,'Eleven'),(12,'Twelve'),(13,'Thirteen'),     
(14,'Fourteen'),(15,'Fifteen'),(16,'Sixteen'),     
(17,'Seventeen'),(18,'Eighteen'),(19,'Nineteen')    
insert into  @Decades(Id,Name) values(20,'Twenty'),(30,'Thirty'),     
(40,'Forty'),(50,'Fifty'),(60,'Sixty'),     
(70,'Seventy'),(80,'Eighty'),(90,'Ninety')    
declare @str nvarchar(max)    
set @str=''    
      
if(@Amount =0)    
set @str=@str+ (select Name from @Ones where Id=@Amount)   
 
if(@Amount >= 1 AND @Amount <20)    
set @str=@str+ (select Name from @Ones where Id=@Amount)    
    
if(@Amount >= 20 AND @Amount <=99)    
set @str=@str+ (select Name From @Decades where Id=      
(@Amount- @Amount%10))+' ' +(select Name From @Ones where Id=(@Amount%10)) +' '    
    
if(@Amount >= 100 AND @Amount <=999)    
set @str=@str+ dbo.ufn_NumberToWords(@Amount/100) +' Hundred '+dbo.ufn_NumberToWords(@Amount%100)    
    
if(@Amount >= 1000 AND @Amount <=99999)    
set @str=@str+ dbo.ufn_NumberToWords(@Amount/1000) +' Thousand '+dbo.ufn_NumberToWords(@Amount%1000)    
    
if(@Amount >= 100000 AND @Amount <=9999999)    
set @str=@str+ dbo.ufn_NumberToWords(@Amount/100000) +' Lac '+dbo.ufn_NumberToWords(@Amount%100000)    
    
if(@Amount >= 10000000 )    
set @str=@str+ dbo.ufn_NumberToWords(@Amount/10000000) +' Crore '+dbo.ufn_NumberToWords(@Amount%10000000)    
    
return @str    
END  
  
  


Replace(CONVERT(VARCHAR,DueDate,106), ' ', '/')

select @@version
sp_spaceused dctran

select PARA_DESC, PARA_NAME from PSL_PARA_MASTER where PARA_DESC in((select items from dbo.Split(@ParType,',')))  

DECLARE @document_Info VARCHAR(4000);
SELECT @document_Info = COALESCE(@document_Info+ ' ,', ' ') +  document_addinfo
FROM  assigned_mode_contract
WHERE hpano = @hpano

ALTER TABLE t_CMS_ComplianceProcessDtl DROP CONSTRAINT FK_t_CMS_ComplianceProcessDtl_t_CMS_ComplianceAssign_Mst;


 ALTER TABLE t_CMS_ComplianceProcessDtl
ADD FOREIGN KEY (f_AssignId) REFERENCES t_CMS_ComplianceValue_Mst(f_ComplianceValueId);

BEGIN TRANSACTION               
                                              
	BEGIN TRY    

COMMIT TRANSACTION;                                                
 END TRY                                                
 BEGIN CATCH                                                
  ROLLBACK TRANSACTION;                                                
 END CATCH     


Cursor

DECLARE @name NVARCHAR(50);
DECLARE @path NVARCHAR(256); -- path for backup files 
DECLARE @fileName NVARCHAR(256); -- filename for backup 
DECLARE @fileDate NVARCHAR(20); -- used for file name 
declare @Temp TABLE (projName varchar(100))


declare amin cursor for 

select F_BP_Proj_Name from T_Pmp_Bits_Project 

open amin

fetch next from amin into @name 


WHILE @@FETCH_STATUS = 0              
BEGIN              

insert into @Temp(projName) values(@name);	
	 SET @fileName = @name 

      FETCH NEXT FROM amin INTO @name 

		--select @fileName;
end
close amin
deallocate amin
select * from @Temp;


CREATE FUNCTION [dbo].[GetCurrentIP] ()
RETURNS varchar(255)
AS
BEGIN
    DECLARE @IP_Address varchar(255);
 
    SELECT @IP_Address = client_net_address
    FROM sys.dm_exec_connections
    WHERE Session_id = @@SPID;
 
    Return @IP_Address;
END



SELECT CONVERT(char(15), CONNECTIONPROPERTY('client_net_address'))


create proc usp_SmartLib_UpdateUserRights  
(@UpdateUserRight UpdateUserRight   readonly,@Result bigint out)  
as  
begin  
  
declare @CurrDate datetime  
set @CurrDate=getdate()  
  
  
declare @User nvarchar(100)  
select top 1 @User=UserId from @UpdateUserRight  
  
if not exists(  
select top 1    f_OSEmployeeCode   from Mmfsl_App_Common.dbo.t_OutSourceEmployee_Mst with (nolock) where f_OSEmployeeCode=@User  and  f_Active_Flag=1  
union  
select top 1  Empid   from [172.30.30.3].dailyupload.dbo.pa_view_employee with (nolock) where Empid=@User  and  Active='A'   
)  
begin  
  
raiserror('Invalid User',16,1);  
return;  
  
end  
  
  
--insert into #tu values ('GiftWou','True','23071328',1,'23071328','ST','1')  
--insert into #tu values ('Test1','False','23071328',2,'23071328','ST','1')  
set nocount on  
  
update b with(rowlock) set b.f_Active=case when a.Rights='True' then 1 else 0 end,  
f_UpdatedBy=a.f_CreatedBy,  
f_UpdatedByUName=a.f_CreatedByUName,  
f_UpdatedBySessionId=a.f_Session,  
f_UpdatedDate=@CurrDate,  
f_UpdatedIP=a.f_CreatedIP  
from @UpdateUserRight a  join [t_SmartLib_UploadRights] b on a.f_pk_Uid=b.f_pk_Uid  
and a.f_pk_Uid!=0  
  
set @Result=@@ROWCOUNT  
  
insert into [t_SmartLib_UploadRights]   
( f_UserId,  
f_FunctionCode,  
f_ProcessCode,  
f_ActivityCode,  
f_SubActivityCode,  
f_Active,  
f_CreatedBy,  
f_CreatedByUName,  
f_CreatedBySessionId,f_CreatedDate,f_CreatedIP)  
 select a.UserId, c.F_FuncCode,c.F_ProCode,c.F_ActCode,c.F_CODE,1,a.f_CreatedBy,a.f_CreatedByUName,a.f_Session ,@CurrDate,a.f_CreatedIP  
 from T_FILEUPLOAD_SUBACTIVITY c join  @UpdateUserRight a on c.F_CODE=a.SubActCode where a.Rights='True'  
 and a.f_pk_Uid=0  
 --select * from [t_SmartLib_UploadRights]  
    
  set @Result=@Result+@@ROWCOUNT  
 set nocount off  
end  



 BEGIN TRY         
  BEGIN TRANSACTION; 


  COMMIT TRANSACTION;    
    END TRY                          
  BEGIN CATCH            
   IF @@TRANCOUNT > 0    
    ROLLBACK TRANSACTION;    
     
    DECLARE @ErrorNumber INT = ERROR_NUMBER();    
    DECLARE @ErrorLine INT = ERROR_LINE();    
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();    
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();    
    DECLARE @ErrorState INT = ERROR_STATE();    
     
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);    
  END CATCH  